/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optInToToken(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL",
        "no_op": "CALL"
      }
    },
    "createNFT(string,string,string,address,address,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setNewReview(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetOptIn(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "tokenOptIn(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "purchaseNft(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "localReview": {
          "type": "uint64",
          "key": "localReview"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "globalReview": {
          "type": "uint64",
          "key": "r"
        },
        "reviewCount": {
          "type": "uint64",
          "key": "c"
        },
        "assetId": {
          "type": "uint64",
          "key": "n"
        },
        "assetPrice": {
          "type": "uint64",
          "key": "p"
        },
        "tokenId": {
          "type": "uint64",
          "key": "t"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjkwLjMKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpjYWxsX09wdEluICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKLy8gZG9BeGZlcihyZWNlaXZlcjogQWRkcmVzcywgYXNzZXQ6IEFzc2V0SUQsIGFtb3VudDogdWludDY0KTogdm9pZApkb0F4ZmVyOgoJcHJvdG8gMyAwCgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czoxNwoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogcmVjZWl2ZXIsCgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IGFtb3VudCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czoxOAoJLy8gYXNzZXRSZWNlaXZlcjogcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyByZWNlaXZlcjogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czoxOQoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0yIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6MjAKCS8vIGFzc2V0QW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gZG9PcHRJbihhc3NldDogQXNzZXRJRCk6IHZvaWQKZG9PcHRJbjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6MjUKCS8vIHRoaXMuZG9BeGZlcih0aGlzLmFwcC5hZGRyZXNzLCBhc3NldCwgMCkKCWludCAwCglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgljYWxsc3ViIGRvQXhmZXIKCXJldHN1YgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludCAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjMwCgkvLyB0aGlzLmdsb2JhbFJldmlldy52YWx1ZSA9IDAKCWJ5dGUgMHg3MiAvLyAiciIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6MzEKCS8vIHRoaXMucmV2aWV3Q291bnQudmFsdWUgPSAwCglieXRlIDB4NjMgLy8gImMiCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjMyCgkvLyB0aGlzLmFzc2V0UHJpY2UudmFsdWUgPSAwCglieXRlIDB4NzAgLy8gInAiCglpbnQgMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjMzCgkvLyB0aGlzLmFzc2V0SWQudmFsdWUgPSBBc3NldElELnplcm9JbmRleAoJYnl0ZSAweDZlIC8vICJuIgoJaW50IDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czozNAoJLy8gdGhpcy50b2tlbklkLnZhbHVlID0gQXNzZXRJRC56ZXJvSW5kZXgKCWJ5dGUgMHg3NCAvLyAidCIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBvcHRJblRvVG9rZW4odWludDY0KXZvaWQKKmFiaV9yb3V0ZV9vcHRJblRvVG9rZW46CgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBvcHRJblRvVG9rZW4odWludDY0KXZvaWQKCWNhbGxzdWIgb3B0SW5Ub1Rva2VuCglpbnQgMQoJcmV0dXJuCgovLyBvcHRJblRvVG9rZW4oYXNzZXQ6IEFzc2V0SUQpOiB2b2lkCm9wdEluVG9Ub2tlbjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6MzkKCS8vIHRoaXMudG9rZW5JZC52YWx1ZSA9IGFzc2V0CglieXRlIDB4NzQgLy8gInQiCglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo0MAoJLy8gdGhpcy5kb09wdEluKGFzc2V0KQoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECgljYWxsc3ViIGRvT3B0SW4KCXJldHN1YgoKLy8gb3B0SW5Ub0FwcGxpY2F0aW9uKCl2b2lkCiphYmlfcm91dGVfb3B0SW5Ub0FwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBvcHRJblRvQXBwbGljYXRpb24oKXZvaWQKCWNhbGxzdWIgb3B0SW5Ub0FwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyBvcHRJblRvQXBwbGljYXRpb24oKTogdm9pZApvcHRJblRvQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjQ2CgkvLyB0aGlzLmxvY2FsUmV2aWV3KHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSAwCgl0eG4gU2VuZGVyCglieXRlIDB4NmM2ZjYzNjE2YzUyNjU3NjY5NjU3NyAvLyAibG9jYWxSZXZpZXciCglpbnQgMAoJYXBwX2xvY2FsX3B1dAoJcmV0c3ViCgovLyBjcmVhdGVORlQoc3RyaW5nLHN0cmluZyxzdHJpbmcsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NCl1aW50NjQKKmFiaV9yb3V0ZV9jcmVhdGVORlQ6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIHRvdGFsOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDYKCWJ0b2kKCgkvLyByZXNlcnZlOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gbWFuYWdlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIHVybDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglleHRyYWN0IDIgMAoKCS8vIHVuaXROYW1lOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gbmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY3JlYXRlTkZUKHN0cmluZyxzdHJpbmcsc3RyaW5nLGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpdWludDY0CgljYWxsc3ViIGNyZWF0ZU5GVAoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIGNyZWF0ZU5GVChuYW1lOiBzdHJpbmcsIHVuaXROYW1lOiBzdHJpbmcsIHVybDogc3RyaW5nLCBtYW5hZ2VyOiBBZGRyZXNzLCByZXNlcnZlOiBBZGRyZXNzLCB0b3RhbDogdWludDY0KTogQXNzZXRJRApjcmVhdGVORlQ6Cglwcm90byA2IDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6NTEKCS8vIGNyZWF0ZWRBc3NldCA9IHNlbmRBc3NldENyZWF0aW9uKHsKCS8vICAgICAgIGNvbmZpZ0Fzc2V0TmFtZTogbmFtZSwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6IHVuaXROYW1lLAoJLy8gICAgICAgY29uZmlnQXNzZXRVUkw6IHVybCwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0TWFuYWdlcjogbWFuYWdlciwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0UmVzZXJ2ZTogcmVzZXJ2ZSwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0RGVjaW1hbHM6IDAsCgkvLyAgICAgICBjb25maWdBc3NldFRvdGFsOiB0b3RhbCwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0RGVmYXVsdEZyb3plbjogMCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50IGFjZmcKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjUyCgkvLyBjb25maWdBc3NldE5hbWU6IG5hbWUKCWZyYW1lX2RpZyAtMSAvLyBuYW1lOiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo1MwoJLy8gY29uZmlnQXNzZXRVbml0TmFtZTogdW5pdE5hbWUKCWZyYW1lX2RpZyAtMiAvLyB1bml0TmFtZTogc3RyaW5nCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjU0CgkvLyBjb25maWdBc3NldFVSTDogdXJsCglmcmFtZV9kaWcgLTMgLy8gdXJsOiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVUkwKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjU1CgkvLyBjb25maWdBc3NldE1hbmFnZXI6IG1hbmFnZXIKCWZyYW1lX2RpZyAtNCAvLyBtYW5hZ2VyOiBBZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6NTYKCS8vIGNvbmZpZ0Fzc2V0UmVzZXJ2ZTogcmVzZXJ2ZQoJZnJhbWVfZGlnIC01IC8vIHJlc2VydmU6IEFkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo1NwoJLy8gY29uZmlnQXNzZXREZWNpbWFsczogMAoJaW50IDAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6NTgKCS8vIGNvbmZpZ0Fzc2V0VG90YWw6IHRvdGFsCglmcmFtZV9kaWcgLTYgLy8gdG90YWw6IHVpbnQ2NAoJaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo1OQoJLy8gY29uZmlnQXNzZXREZWZhdWx0RnJvemVuOiAwCglpbnQgMAoJaXR4bl9maWVsZCBDb25maWdBc3NldERlZmF1bHRGcm96ZW4KCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIENyZWF0ZWRBc3NldElECglmcmFtZV9idXJ5IDAgLy8gY3JlYXRlZEFzc2V0OiB1aW50NjQKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjYxCgkvLyB0aGlzLmFzc2V0SWQudmFsdWUgPSBjcmVhdGVkQXNzZXQKCWJ5dGUgMHg2ZSAvLyAibiIKCWZyYW1lX2RpZyAwIC8vIGNyZWF0ZWRBc3NldDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6NjIKCS8vIHJldHVybiBjcmVhdGVkQXNzZXQ7CglmcmFtZV9kaWcgMCAvLyBjcmVhdGVkQXNzZXQ6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBzZXROZXdSZXZpZXcodWludDY0KXVpbnQ2NAoqYWJpX3JvdXRlX3NldE5ld1JldmlldzoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gbmV3VXNlclJldmlldzogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBzZXROZXdSZXZpZXcodWludDY0KXVpbnQ2NAoJY2FsbHN1YiBzZXROZXdSZXZpZXcKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBzZXROZXdSZXZpZXcobmV3VXNlclJldmlldzogdWludDY0KTogdWludDY0CnNldE5ld1JldmlldzoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDIKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjY3CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyLmlzT3B0ZWRJblRvQXBwKHRoaXMuYXBwLmlkKSkKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9vcHRlZF9pbgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo2OAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlci5pc09wdGVkSW5Ub0Fzc2V0KHRoaXMudG9rZW5JZC52YWx1ZSkpCgl0eG4gU2VuZGVyCglieXRlIDB4NzQgLy8gInQiCglhcHBfZ2xvYmFsX2dldAoJYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6NzAKCS8vIGdsb2JhbFJldmlldyA9IHRoaXMuZ2xvYmFsUmV2aWV3LnZhbHVlCglieXRlIDB4NzIgLy8gInIiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfYnVyeSAwIC8vIGdsb2JhbFJldmlldzogdWludDY0CgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo3MQoJLy8gcmV2aWV3Q291bnQgPSB0aGlzLnJldmlld0NvdW50LnZhbHVlCglieXRlIDB4NjMgLy8gImMiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfYnVyeSAxIC8vIHJldmlld0NvdW50OiB1aW50NjQKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjcyCgkvLyBsb2NhbFJldmlldyA9IHRoaXMubG9jYWxSZXZpZXcodGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJdHhuIFNlbmRlcgoJYnl0ZSAweDZjNmY2MzYxNmM1MjY1NzY2OTY1NzcgLy8gImxvY2FsUmV2aWV3IgoJYXBwX2xvY2FsX2dldAoJZnJhbWVfYnVyeSAyIC8vIGxvY2FsUmV2aWV3OiB1aW50NjQKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo3NAoJLy8gbG9jYWxSZXZpZXcgPT09IDAKCWZyYW1lX2RpZyAyIC8vIGxvY2FsUmV2aWV3OiB1aW50NjQKCWludCAwCgk9PQoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6NzUKCS8vIHRoaXMuZG9BeGZlcih0aGlzLnR4bi5zZW5kZXIsIHRoaXMudG9rZW5JZC52YWx1ZSwgMV8wMDAgLSB0aGlzLnJldmlld0NvdW50LnZhbHVlKQoJaW50IDFfMDAwCglieXRlIDB4NjMgLy8gImMiCglhcHBfZ2xvYmFsX2dldAoJLQoJYnl0ZSAweDc0IC8vICJ0IgoJYXBwX2dsb2JhbF9nZXQKCXR4biBTZW5kZXIKCWNhbGxzdWIgZG9BeGZlcgoKKmlmMF9lbmQ6CgkvLyAqaWYxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo3OAoJLy8gbG9jYWxSZXZpZXcgPiAwCglmcmFtZV9kaWcgMiAvLyBsb2NhbFJldmlldzogdWludDY0CglpbnQgMAoJPgoJYnogKmlmMV9lbmQKCgkvLyAqaWYxX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6ODEKCS8vIHJldmlld0NvdW50ID0gcmV2aWV3Q291bnQgLSAxCglmcmFtZV9kaWcgMSAvLyByZXZpZXdDb3VudDogdWludDY0CglpbnQgMQoJLQoJZnJhbWVfYnVyeSAxIC8vIHJldmlld0NvdW50OiB1aW50NjQKCgkvLyAqaWYyX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo4MgoJLy8gcmV2aWV3Q291bnQgPT09IDAKCWZyYW1lX2RpZyAxIC8vIHJldmlld0NvdW50OiB1aW50NjQKCWludCAwCgk9PQoJYnogKmlmMl9lbHNlCgoJLy8gKmlmMl9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjgzCgkvLyB0aGlzLmdsb2JhbFJldmlldy52YWx1ZSA9IDAKCWJ5dGUgMHg3MiAvLyAiciIKCWludCAwCglhcHBfZ2xvYmFsX3B1dAoJYiAqaWYyX2VuZAoKKmlmMl9lbHNlOgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo4NQoJLy8gdGhpcy5nbG9iYWxSZXZpZXcudmFsdWUgPSAoZ2xvYmFsUmV2aWV3ICogcmV2aWV3Q291bnQgLSBsb2NhbFJldmlldykgLyByZXZpZXdDb3VudAoJYnl0ZSAweDcyIC8vICJyIgoJZnJhbWVfZGlnIDAgLy8gZ2xvYmFsUmV2aWV3OiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIHJldmlld0NvdW50OiB1aW50NjQKCSoKCWZyYW1lX2RpZyAyIC8vIGxvY2FsUmV2aWV3OiB1aW50NjQKCS0KCWZyYW1lX2RpZyAxIC8vIHJldmlld0NvdW50OiB1aW50NjQKCS8KCWFwcF9nbG9iYWxfcHV0CgoqaWYyX2VuZDoKCippZjFfZW5kOgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo5MAoJLy8gdGhpcy5yZXZpZXdDb3VudC52YWx1ZSA9IHJldmlld0NvdW50ICsgMQoJYnl0ZSAweDYzIC8vICJjIgoJZnJhbWVfZGlnIDEgLy8gcmV2aWV3Q291bnQ6IHVpbnQ2NAoJaW50IDEKCSsKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo5MgoJLy8gdGhpcy5sb2NhbFJldmlldyh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlID0gbmV3VXNlclJldmlldwoJdHhuIFNlbmRlcgoJYnl0ZSAweDZjNmY2MzYxNmM1MjY1NzY2OTY1NzcgLy8gImxvY2FsUmV2aWV3IgoJZnJhbWVfZGlnIC0xIC8vIG5ld1VzZXJSZXZpZXc6IHVpbnQ2NAoJYXBwX2xvY2FsX3B1dAoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6OTQKCS8vIHRoaXMuZ2xvYmFsUmV2aWV3LnZhbHVlID0gKGdsb2JhbFJldmlldyAqIHJldmlld0NvdW50ICsgbmV3VXNlclJldmlldykgLyB0aGlzLnJldmlld0NvdW50LnZhbHVlCglieXRlIDB4NzIgLy8gInIiCglmcmFtZV9kaWcgMCAvLyBnbG9iYWxSZXZpZXc6IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gcmV2aWV3Q291bnQ6IHVpbnQ2NAoJKgoJZnJhbWVfZGlnIC0xIC8vIG5ld1VzZXJSZXZpZXc6IHVpbnQ2NAoJKwoJYnl0ZSAweDYzIC8vICJjIgoJYXBwX2dsb2JhbF9nZXQKCS8KCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czo5NwoJLy8gdGhpcy5hc3NldFByaWNlLnZhbHVlID0gMjUwXzAwMCAqIHRoaXMucmV2aWV3Q291bnQudmFsdWUKCWJ5dGUgMHg3MCAvLyAicCIKCWludCAyNTBfMDAwCglieXRlIDB4NjMgLy8gImMiCglhcHBfZ2xvYmFsX2dldAoJKgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjk5CgkvLyByZXR1cm4gdGhpcy5nbG9iYWxSZXZpZXcudmFsdWU7CglieXRlIDB4NzIgLy8gInIiCglhcHBfZ2xvYmFsX2dldAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDIKCXJldHN1YgoKLy8gYXNzZXRPcHRJbihheGZlcil2b2lkCiphYmlfcm91dGVfYXNzZXRPcHRJbjoKCS8vIHR4bjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IGF4ZmVyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhc3NldE9wdEluKGF4ZmVyKXZvaWQKCWNhbGxzdWIgYXNzZXRPcHRJbgoJaW50IDEKCXJldHVybgoKLy8gYXNzZXRPcHRJbih0eG46IEFzc2V0VHJhbnNmZXJUeG4pOiB2b2lkCmFzc2V0T3B0SW46Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvUGxheWVyQ2FyZC5hbGdvLnRzOjEwNAoJLy8gdmVyaWZ5QXNzZXRUcmFuc2ZlclR4bih0eG4sIHsKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIGFzc2V0QW1vdW50OiB7IGxlc3NUaGFuRXF1YWxUbzogMCB9LAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHR4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWludCAwCgk8PQoJYXNzZXJ0CglyZXRzdWIKCi8vIHRva2VuT3B0SW4oYXhmZXIpdm9pZAoqYWJpX3JvdXRlX3Rva2VuT3B0SW46CgkvLyB0eG46IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBheGZlcgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgdG9rZW5PcHRJbihheGZlcil2b2lkCgljYWxsc3ViIHRva2VuT3B0SW4KCWludCAxCglyZXR1cm4KCi8vIHRva2VuT3B0SW4odHhuOiBBc3NldFRyYW5zZmVyVHhuKTogdm9pZAp0b2tlbk9wdEluOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czoxMTIKCS8vIHZlcmlmeUFzc2V0VHJhbnNmZXJUeG4odHhuLCB7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICBhc3NldEFtb3VudDogeyBsZXNzVGhhbkVxdWFsVG86IDAgfSwKCS8vICAgICB9KQoJLy8gdmVyaWZ5IGFzc2V0UmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyB0eG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRBbW91bnQKCWZyYW1lX2RpZyAtMSAvLyB0eG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CglpbnQgMAoJPD0KCWFzc2VydAoJcmV0c3ViCgovLyBwdXJjaGFzZU5mdChwYXkpdm9pZAoqYWJpX3JvdXRlX3B1cmNoYXNlTmZ0OgoJLy8gcGF5bWVudDogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHB1cmNoYXNlTmZ0KHBheSl2b2lkCgljYWxsc3ViIHB1cmNoYXNlTmZ0CglpbnQgMQoJcmV0dXJuCgovLyBwdXJjaGFzZU5mdChwYXltZW50OiBQYXlUeG4pOiB2b2lkCnB1cmNoYXNlTmZ0OgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czoxMjAKCS8vIHZlcmlmeVR4bihwYXltZW50LCB7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuY3JlYXRvciwKCS8vICAgICAgIGFtb3VudDogeyBncmVhdGVyVGhhbkVxdWFsVG86IHRoaXMuYXNzZXRQcmljZS52YWx1ZSB9LAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXltZW50OiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gcGF5bWVudDogUGF5VHhuCglndHhucyBBbW91bnQKCWJ5dGUgMHg3MCAvLyAicCIKCWFwcF9nbG9iYWxfZ2V0Cgk+PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czoxMjUKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIHhmZXJBc3NldDogdGhpcy5hc3NldElkLnZhbHVlLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IDEsCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6MTI2CgkvLyB4ZmVyQXNzZXQ6IHRoaXMuYXNzZXRJZC52YWx1ZQoJYnl0ZSAweDZlIC8vICJuIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL1BsYXllckNhcmQuYWxnby50czoxMjcKCS8vIGFzc2V0QW1vdW50OiAxCglpbnQgMQoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9QbGF5ZXJDYXJkLmFsZ28udHM6MTI4CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWVycgoKKmNhbGxfTm9PcDoKCW1ldGhvZCAib3B0SW5Ub1Rva2VuKHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJvcHRJblRvQXBwbGljYXRpb24oKXZvaWQiCgltZXRob2QgImNyZWF0ZU5GVChzdHJpbmcsc3RyaW5nLHN0cmluZyxhZGRyZXNzLGFkZHJlc3MsdWludDY0KXVpbnQ2NCIKCW1ldGhvZCAic2V0TmV3UmV2aWV3KHVpbnQ2NCl1aW50NjQiCgltZXRob2QgImFzc2V0T3B0SW4oYXhmZXIpdm9pZCIKCW1ldGhvZCAidG9rZW5PcHRJbihheGZlcil2b2lkIgoJbWV0aG9kICJwdXJjaGFzZU5mdChwYXkpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfb3B0SW5Ub1Rva2VuICphYmlfcm91dGVfb3B0SW5Ub0FwcGxpY2F0aW9uICphYmlfcm91dGVfY3JlYXRlTkZUICphYmlfcm91dGVfc2V0TmV3UmV2aWV3ICphYmlfcm91dGVfYXNzZXRPcHRJbiAqYWJpX3JvdXRlX3Rva2VuT3B0SW4gKmFiaV9yb3V0ZV9wdXJjaGFzZU5mdAoJZXJyCgoqY2FsbF9PcHRJbjoKCW1ldGhvZCAib3B0SW5Ub0FwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9vcHRJblRvQXBwbGljYXRpb24KCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "PlayerCard",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToToken",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createNFT",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "unitName",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "manager",
            "type": "address"
          },
          {
            "name": "reserve",
            "type": "address"
          },
          {
            "name": "total",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "setNewReview",
        "args": [
          {
            "name": "newUserReview",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "assetOptIn",
        "args": [
          {
            "name": "txn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "tokenOptIn",
        "args": [
          {
            "name": "txn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "purchaseNft",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the PlayerCard smart contract.
 */
export type PlayerCard = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'optInToToken(uint64)void' | 'optInToToken', {
      argsObj: {
        asset: bigint | number
      }
      argsTuple: [asset: bigint | number]
      returns: void
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createNFT(string,string,string,address,address,uint64)uint64' | 'createNFT', {
      argsObj: {
        name: string
        unitName: string
        url: string
        manager: string
        reserve: string
        total: bigint | number
      }
      argsTuple: [name: string, unitName: string, url: string, manager: string, reserve: string, total: bigint | number]
      returns: bigint
    }>
    & Record<'setNewReview(uint64)uint64' | 'setNewReview', {
      argsObj: {
        newUserReview: bigint | number
      }
      argsTuple: [newUserReview: bigint | number]
      returns: bigint
    }>
    & Record<'assetOptIn(axfer)void' | 'assetOptIn', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'tokenOptIn(axfer)void' | 'tokenOptIn', {
      argsObj: {
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'purchaseNft(pay)void' | 'purchaseNft', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'r'?: IntegerState
      'c'?: IntegerState
      'n'?: IntegerState
      'p'?: IntegerState
      't'?: IntegerState
    }
    local: {
      'localReview'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PlayerCardSig = keyof PlayerCard['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PlayerCardSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the PlayerCard smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PlayerCardSig> = PlayerCard['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PlayerCard smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PlayerCardSig> = PlayerCard['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PlayerCardCreateCalls = (typeof PlayerCardCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PlayerCardCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type PlayerCardDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PlayerCardCreateCalls) => PlayerCardCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PlayerCardCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the PlayerCard smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the PlayerCard smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToToken(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInToToken(args: MethodArgs<'optInToToken(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInToToken(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the optInToApplication()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInToApplication()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createNFT(string,string,string,address,address,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createNft(args: MethodArgs<'createNFT(string,string,string,address,address,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createNFT(string,string,string,address,address,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.name, args.unitName, args.url, args.manager, args.reserve, args.total],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setNewReview(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setNewReview(args: MethodArgs<'setNewReview(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setNewReview(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.newUserReview],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the assetOptIn(axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static assetOptIn(args: MethodArgs<'assetOptIn(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'assetOptIn(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the tokenOptIn(axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static tokenOptIn(args: MethodArgs<'tokenOptIn(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'tokenOptIn(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the purchaseNft(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static purchaseNft(args: MethodArgs<'purchaseNft(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'purchaseNft(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment],
      ...params,
    }
  }
}

/**
 * A client to make calls to the PlayerCard smart contract
 */
export class PlayerCardClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PlayerCardClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof PlayerCard['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the PlayerCard smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PlayerCardDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PlayerCardCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the PlayerCard smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(PlayerCardCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the PlayerCard smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'optInToApplication()void'>>(await $this.appClient.optIn(PlayerCardCallFactory.optIn.optInToApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the PlayerCard smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the optInToToken(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInToToken(args: MethodArgs<'optInToToken(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlayerCardCallFactory.optInToToken(args, params))
  }

  /**
   * Calls the optInToApplication()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlayerCardCallFactory.optInToApplication(args, params))
  }

  /**
   * Calls the createNFT(string,string,string,address,address,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createNft(args: MethodArgs<'createNFT(string,string,string,address,address,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlayerCardCallFactory.createNft(args, params))
  }

  /**
   * Calls the setNewReview(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setNewReview(args: MethodArgs<'setNewReview(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlayerCardCallFactory.setNewReview(args, params))
  }

  /**
   * Calls the assetOptIn(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public assetOptIn(args: MethodArgs<'assetOptIn(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlayerCardCallFactory.assetOptIn(args, params))
  }

  /**
   * Calls the tokenOptIn(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public tokenOptIn(args: MethodArgs<'tokenOptIn(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlayerCardCallFactory.tokenOptIn(args, params))
  }

  /**
   * Calls the purchaseNft(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public purchaseNft(args: MethodArgs<'purchaseNft(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PlayerCardCallFactory.purchaseNft(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<PlayerCard['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get r() {
        return PlayerCardClient.getIntegerState(state, 'r')
      },
      get c() {
        return PlayerCardClient.getIntegerState(state, 'c')
      },
      get n() {
        return PlayerCardClient.getIntegerState(state, 'n')
      },
      get p() {
        return PlayerCardClient.getIntegerState(state, 'p')
      },
      get t() {
        return PlayerCardClient.getIntegerState(state, 't')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<PlayerCard['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get localReview() {
        return PlayerCardClient.getIntegerState(state, 'localReview')
      },
    }
  }

  public compose(): PlayerCardComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      optInToToken(args: MethodArgs<'optInToToken(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInToToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createNft(args: MethodArgs<'createNFT(string,string,string,address,address,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setNewReview(args: MethodArgs<'setNewReview(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setNewReview(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      assetOptIn(args: MethodArgs<'assetOptIn(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.assetOptIn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      tokenOptIn(args: MethodArgs<'tokenOptIn(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.tokenOptIn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      purchaseNft(args: MethodArgs<'purchaseNft(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.purchaseNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PlayerCardComposer
  }
}
export type PlayerCardComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToToken(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToToken(args: MethodArgs<'optInToToken(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlayerCardComposer<[...TReturns, MethodReturn<'optInToToken(uint64)void'>]>

  /**
   * Calls the optInToApplication()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlayerCardComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>

  /**
   * Calls the createNFT(string,string,string,address,address,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNft(args: MethodArgs<'createNFT(string,string,string,address,address,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlayerCardComposer<[...TReturns, MethodReturn<'createNFT(string,string,string,address,address,uint64)uint64'>]>

  /**
   * Calls the setNewReview(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setNewReview(args: MethodArgs<'setNewReview(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlayerCardComposer<[...TReturns, MethodReturn<'setNewReview(uint64)uint64'>]>

  /**
   * Calls the assetOptIn(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  assetOptIn(args: MethodArgs<'assetOptIn(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlayerCardComposer<[...TReturns, MethodReturn<'assetOptIn(axfer)void'>]>

  /**
   * Calls the tokenOptIn(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  tokenOptIn(args: MethodArgs<'tokenOptIn(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlayerCardComposer<[...TReturns, MethodReturn<'tokenOptIn(axfer)void'>]>

  /**
   * Calls the purchaseNft(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseNft(args: MethodArgs<'purchaseNft(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PlayerCardComposer<[...TReturns, MethodReturn<'purchaseNft(pay)void'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the PlayerCard smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams): PlayerCardComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the PlayerCard smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): PlayerCardComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PlayerCardComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<PlayerCardComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<PlayerCardComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type PlayerCardComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type PlayerCardComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
