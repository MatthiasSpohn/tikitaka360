{
  "hints": {
    "bootstrap()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintAndGetApp(string,string,string,address,address,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fundFactoryApp(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateScoreBox(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createChallenge(pay,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(pay,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "collectScorePoints(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readScoreBox(address)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeChallengeBox(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeScoreBox(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "challengeIndex": {
          "type": "uint64",
          "key": "challengeIndex"
        },
        "tokenID": {
          "type": "uint64",
          "key": "tokenID"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "TikiTaka360",
    "desc": "",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "mintAndGetApp",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "unitName",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "manager",
            "type": "address"
          },
          {
            "name": "reserve",
            "type": "address"
          },
          {
            "name": "total",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "fundFactoryApp",
        "args": [
          {
            "name": "address",
            "type": "address"
          },
          {
            "name": "appid",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateScoreBox",
        "args": [
          {
            "name": "address",
            "type": "address"
          },
          {
            "name": "sp",
            "type": "uint64"
          },
          {
            "name": "cp",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createChallenge",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          },
          {
            "name": "length",
            "type": "uint64"
          },
          {
            "name": "given",
            "type": "uint64"
          },
          {
            "name": "playerId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          },
          {
            "name": "playerId",
            "type": "uint64"
          },
          {
            "name": "prediction",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "collectScorePoints",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "readScoreBox",
        "args": [
          {
            "name": "address",
            "type": "address"
          }
        ],
        "returns": {
          "type": "(uint64,uint64)"
        }
      },
      {
        "name": "removeChallengeBox",
        "args": [
          {
            "name": "playerId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "removeScoreBox",
        "args": [
          {
            "name": "address",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}