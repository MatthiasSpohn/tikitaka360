{
  "hints": {
    "bootstrap()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintAndGetApp(string,string,string,address,address,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fundFactoryApp(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createScoreBox()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateScoreBox(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "tokenID": {
          "type": "uint64",
          "key": "tokenID"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "PlayerCardCaller",
    "desc": "",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "mintAndGetApp",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "unitName",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "manager",
            "type": "address"
          },
          {
            "name": "reserve",
            "type": "address"
          },
          {
            "name": "total",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "fundFactoryApp",
        "args": [
          {
            "name": "address",
            "type": "address"
          },
          {
            "name": "appid",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createScoreBox",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateScoreBox",
        "args": [
          {
            "name": "address",
            "type": "address"
          },
          {
            "name": "sp",
            "type": "uint64"
          },
          {
            "name": "cp",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}