{
  "hints": {
    "bootstrap()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mintAndGetApp(string,string,string,address,address,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fundFactoryApp(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createScoreBox()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateScoreBox(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL",
        "no_op": "CALL"
      }
    },
    "startChallenge(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "participate(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "endChallenge()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "assessment": {
          "type": "uint64",
          "key": "ua"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "tokenID": {
          "type": "uint64",
          "key": "tokenID"
        },
        "challengeEnd": {
          "type": "uint64",
          "key": "challengeEnd"
        },
        "winnerIndex": {
          "type": "uint64",
          "key": "winnerIndex"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 1
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Challenge",
    "desc": "",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "mintAndGetApp",
        "args": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "unitName",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          },
          {
            "name": "manager",
            "type": "address"
          },
          {
            "name": "reserve",
            "type": "address"
          },
          {
            "name": "total",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "fundFactoryApp",
        "args": [
          {
            "name": "address",
            "type": "address"
          },
          {
            "name": "appid",
            "type": "uint64"
          },
          {
            "name": "amount",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createScoreBox",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateScoreBox",
        "args": [
          {
            "name": "address",
            "type": "address"
          },
          {
            "name": "sp",
            "type": "uint64"
          },
          {
            "name": "cp",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "startChallenge",
        "args": [
          {
            "name": "length",
            "type": "uint64"
          },
          {
            "name": "given",
            "type": "uint64"
          },
          {
            "name": "assetId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "participate",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          },
          {
            "name": "prediction",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "endChallenge",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}